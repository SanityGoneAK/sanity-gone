---
import InterpunctSpacer from "../ui/InterpunctSpacer.astro";
import StarIcon from "../icons/StarIcon";
import OperatorBranchAndTrait from "./OperatorBranchAndTrait.tsx";
import { operatorClassIcon } from "~/utils/images";
import { professionToClass, classToProfession } from "~/utils/classes";
import { getMeleeOrRangedOrBoth } from "~/utils/character-stats";
import { cx } from "~/utils/styles";

import type * as OutputTypes from "~/types/output-types";

interface Props {
	operator: OutputTypes.Character;
}

const { operator } = Astro.props;
const [baseName, alterName] = operator.name.split(/ the /i);
const operatorClass = professionToClass(operator.profession);
const rarity = operator.rarity as 1 | 2 | 3 | 4 | 5 | 6;
---

<div
	class="grid pt-6 pb-4 px-6 grid-rows-[auto_auto] gap-y-2 bg-neutral-600/[.66]"
>
	<h1 class="font-serif text-[40px] leading-none font-bold">
		{baseName}
		{
			alterName && (
				<span class="text-neutral-200 font-normal">
					The {alterName}
				</span>
			)
		}
	</h1>
	<div
		class="grid grid-flow-col auto-cols-max gap-x-3 items-center justify-start"
	>
		<div class="grid grid-flow-col items-center gap-x-2">
			<span class="visually-hidden">Rarity: {rarity}</span>
			<span class="grid grid-flow-col">
				{
					Array(rarity)
						.fill(null)
						.map(() => <StarIcon rarity={rarity} />)
				}
			</span>
			{
				operator.isLimited && (
					<span
						class={cx(
							`relative inline-block mr-1.5 text-base leading-normal
					font-black italic bg-gradient-to-b bg-clip-text text-transparent uppercase`,
							{
								6: "from-orange to-orange-light",
								5: "from-yellow to-yellow-light",
								4: "from-purple to-purple-light",
								3: "from-blue to-blue-light",
								2: "from-green to-green-light",
								1: "bg-neutral-50",
							}[rarity]
						)}
					>
						Limited
					</span>
				)
			}
		</div>
		<div class="grid grid-flow-col items-center gap-x-2">
			<img
				class="h-4 w-full"
				src={operatorClassIcon(
					classToProfession(operatorClass).toLowerCase()
				)}
				alt=""
			/>
			<span>{operatorClass}</span>
		</div>
		<OperatorBranchAndTrait client:idle />
		<InterpunctSpacer />
		<span class="text-neutral-200"
			>{
				getMeleeOrRangedOrBoth(operator.position, operator.description)
			}</span
		>
	</div>
</div>
