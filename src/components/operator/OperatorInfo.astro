---
import { Image } from "astro:assets";

import InterpunctSpacer from "../ui/InterpunctSpacer.astro";
import StarIcon from "../icons/StarIcon";
import OperatorBranchAndTrait from "./OperatorBranchAndTrait.tsx";
import { operatorClassIcon } from "~/utils/images";
import { professionToClass, classToProfession } from "~/utils/classes";
import { getMeleeOrRangedOrBoth } from "~/utils/character-stats";
import { cx } from "~/utils/styles";

import type * as OutputTypes from "~/types/output-types";
import { operatorAvatar } from "../../utils/images";

import MeleeIcon from "~/components/icons/MeleeIcon.tsx";
import RangedIcon from "~/components/icons/RangedIcon.tsx";
import MeleeAndRangedIcon from "~/components/icons/MeleeAndRangedIcon.tsx";

interface Props {
	operator: OutputTypes.Character;
}

const { operator } = Astro.props;
const [baseName, alterName] = operator.name.split(/ the /i);
const operatorClass = professionToClass(operator.profession);
const rarity = operator.rarity as 1 | 2 | 3 | 4 | 5 | 6;

const meleeOrRanged = getMeleeOrRangedOrBoth(
	operator.position,
	operator.description
);

---

<div
	class="grid grid-rows-[auto_auto] gap-y-2 bg-neutral-600/[.66] sm:rounded-t"
>
	<div
		class="flex items-center w-full gap-1 px-5 h-6 sm:rounded-t bg-orange/[.08]"
	>
		<span class="visually-hidden">Rarity: {rarity}</span>
		<span class="grid grid-flow-col">
			{
				Array(rarity)
					.fill(null)
					.map(() => <StarIcon className="h-3" rarity={rarity} />)
			}
		</span>
		{
			operator.isLimited && (
				<span
					class={cx(
						`relative inline-block leading-normal
					font-black italic bg-gradient-to-b bg-clip-text text-transparent uppercase`,
						{
							6: "from-orange to-orange-light",
							5: "from-yellow to-yellow-light",
							4: "from-purple to-purple-light",
							3: "from-blue to-blue-light",
							2: "from-green to-green-light",
							1: "bg-neutral-50",
						}[rarity]
					)}
					style={
						// tailwind doesn't appear to have this as a predefined class
						"font-height: 10px; line-height: 12px;"
					}
				>
					Limited
				</span>
			)
		}
	</div>
	<div class="px-5 flex gap-4 w-full">
		<div class="w-18 h-18">
			<Image
				class="rounded"
				src={operatorAvatar(operator.charId, 0)}
				alt={operator.name}
				width="72"
				height="72"
			/>
		</div>
		<div class="flex flex-col flex-grow">
			<div>
				<h1 class="font-serif text-[36px] leading-10 font-bold">
					{baseName}
					{
						alterName && (
							<span class="text-neutral-200 font-normal">
						The {alterName}
					</span>
						)
					}
				</h1>
			</div>
			<div class="flex-grow"></div> {/* spacer (theoretically never needed, but just to be safe) */}
			<div class="flex items-center gap-x-3 w-full">
				<div class="grid grid-flow-col items-center gap-x-2">
					<img
						class="h-5 w-full"
						src={operatorClassIcon(
							classToProfession(operatorClass).toLowerCase()
						)}
						alt=""
					/>
					<span>{operatorClass}</span>
				</div>
				<OperatorBranchAndTrait client:idle />
				<div class="flex-grow"></div> {/* spacer */}
				<div class="flex flex-row items-center gap-2">
					{
						meleeOrRanged === "Melee" && (
							<MeleeIcon/>
						)
					}
					{
						meleeOrRanged === "Ranged" && (
							<RangedIcon/>
						)
					}
					{
						meleeOrRanged === "Melee & Ranged" && (
							<MeleeAndRangedIcon/>
						)
					}
					<span class="text-neutral-200"
					>{
						meleeOrRanged
					}</span
					>
				</div>

			</div>
		</div>
	</div>
</div>
